


ARM Macro Assembler    Page 1 


    1 00000000         ; main.s
    2 00000000         ; Runs on LM4F120/TM4C123
    3 00000000         ; Provide a brief introduction to the floating point uni
                       t
    4 00000000         ; Jonathan Valvano
    5 00000000         ; May 3, 2015
    6 00000000         
    7 00000000         ;  This example accompanies the book
    8 00000000         ;   "Embedded Systems: Introduction to ARM Cortex M Micr
                       ocontrollers"
    9 00000000         ;   ISBN: 978-1469998749, Jonathan Valvano, copyright (c
                       ) 2015
   10 00000000         
   11 00000000         ;
   12 00000000         ;Copyright 2015 by Jonathan W. Valvano, valvano@mail.ute
                       xas.edu
   13 00000000         ;   You may use, edit, run or distribute this file
   14 00000000         ;   as long as the above copyright notice remains
   15 00000000         ;THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHET
                       HER EXPRESS, IMPLIED
   16 00000000         ;OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WA
                       RRANTIES OF
   17 00000000         ;MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE AP
                       PLY TO THIS SOFTWARE.
   18 00000000         ;VALVANO SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR 
                       SPECIAL, INCIDENTAL,
   19 00000000         ;OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
   20 00000000         ;For more information about my classes, my research, and
                        my books, see
   21 00000000         ;http://users.ece.utexas.edu/~valvano/
   22 00000000                 AREA             DATA, ALIGN=2
   23 00000000 00 00 00 
              00       ten     SPACE            4
   24 00000004 00 00 00 
              00       tenth   SPACE            4
   25 00000008 00 00 00 
              00       In      SPACE            4
   26 0000000C 00 00 00 
              00       A       SPACE            4
   27 00000010 00 00 00 
              00       T       SPACE            4
   28 00000014 00 00 00 
              00       N       SPACE            4
   29 00000018 00 00 00 
              00       y       SPACE            4           ; current filter ou
                                                            tput
   30 0000001C 00 00 00 
              00       y1      SPACE            4           ; filter output 1ms
                                                             ago
   31 00000020 00 00 00 
              00       y2      SPACE            4           ; filter output 2ms
                                                             ago
   32 00000024 00 00 00 
              00       x       SPACE            4           ; current filter in
                                                            put
   33 00000028 00 00 00 
              00       x1      SPACE            4           ; input 1ms ago
   34 0000002C 00 00 00 
              00       x2      SPACE            4           ; input 2ms ago



ARM Macro Assembler    Page 2 


   35 00000030         
   36 00000030         
   37 00000030 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    Buffer  SPACE            80          ; results of circle
                                                             test
   38 00000080                 EXPORT           ten [DATA,SIZE=4]
   39 00000080                 EXPORT           tenth [DATA,SIZE=4]
   40 00000080                 EXPORT           Buffer [DATA,SIZE=80]
   41 00000080         
   42 00000080                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   43 00000000                 THUMB
   44 00000000                 EXPORT           Start
   45 00000000         ; FPU already initialized in this start.s
   46 00000000         Start
   47 00000000         
   48 00000000         Test0
   49 00000000 F000 F853       BL               Test4
   50 00000004 EEB2 0A04       VLDR.F32         S0,=10.0    ;the example from t
                                                            he book
   51 00000008 4859            LDR              R0,=ten
   52 0000000A ED80 0A00       VSTR.F32         S0,[R0]
   53 0000000E         ; 10 = (0,0x82,0x200000) = (0,10000010,01000000000000000
                       000000)
   54 0000000E EDDF 0A59       VLDR.F32         S1,=0.1     ;another example fr
                                                            om the book
   55 00000012 4859            LDR              R0,=tenth
   56 00000014 EDC0 0A00       VSTR.F32         S1,[R0]
   57 00000018         ; 0.1 about (0,0x7B,0x4CCCCD) = (0,01111011,100110011001
                       10011001101)
   58 00000018         
   59 00000018 ED9F 1A58       VLDR.F32         S2,=0.0
   60 0000001C EEF6 1A00       VLDR.F32         S3,=0.5
   61 00000020         



ARM Macro Assembler    Page 3 


   62 00000020 4857            LDR              R0,=In
   63 00000022 EDC0 1A00       VSTR.F32         S3,[R0]     ;In = 0.5
   64 00000026 F000 F810       BL               Test
   65 0000002A ED9F 2A56       VLDR.F32         S4,=0.785398 ;pi/4 
   66 0000002E         
   67 0000002E 4C56            LDR              R4,=Buffer
   68 00000030 F04F 0514       MOV              R5,#20
   69 00000034         
   70 00000034         loop
   71 00000034 EEB0 0A41       VMOV.F32         S0,S2       ; set input paramet
                                                            er
   72 00000038 F000 F811       BL               CircleArea
   73 0000003C ECA4 0A01       VSTR.F32         S0,[R4],#4
   74 00000040 EE31 1A21       VADD.F32         S2,S2,S3    ; next input
   75 00000044 3D01            SUBS             R5,#1
   76 00000046 D1F5            BNE              loop
   77 00000048 E7FE    done    B                done
   78 0000004A         
   79 0000004A B500    Test    PUSH             {LR}
   80 0000004C 484C            LDR              R0,=In
   81 0000004E ED90 0A00       VLDR.F32         S0,[R0]     ;S0 is In
   82 00000052 F000 F804       BL               CircleArea
   83 00000056 484D            LDR              R0,=A
   84 00000058 ED80 0A00       VSTR.F32         S0,[R0]     ;A=pi*In*In
   85 0000005C BD00            POP              {PC}
   86 0000005E         
   87 0000005E         ; Calculate the area of a circle
   88 0000005E         ; Input: S0 is the radius of the circle
   89 0000005E         ; Output: S0 is the area of the circle
   90 0000005E         CircleArea
   91 0000005E EE20 0A00       VMUL.F32         S0,S0,S0    ; input squared
   92 00000062 EDDF 0A4B       VLDR.F32         S1,=3.14159265
   93 00000066 EE20 0A20       VMUL.F32         S0,S0,S1    ; pi*r*r
   94 0000006A 4770            BX               LR
   95 0000006C         
   96 0000006C E000ED88 
                       NVIC_CPAC_R
                               equ              0xE000ED88
   97 0000006C         EnableFPU
   98 0000006C 4849            LDR              R0, =NVIC_CPAC_R
   99 0000006E 6801            LDR              R1, [R0]    ; Read CPACR
  100 00000070 F441 0170       ORR              R1, R1, #0x00F00000 ; Set bits 
                                                            20-23 to enable CP1
                                                            0 and CP11 coproces
                                                            sors
  101 00000074 6001            STR              R1, [R0]
  102 00000076 4770            BX               LR
  103 00000078         
  104 00000078         
  105 00000078         Test3
  106 00000078 F04F 0000       MOV              R0,#0
  107 0000007C 4946            LDR              R1,=N
  108 0000007E 4A47            LDR              R2,=T
  109 00000080 EDDF 0A47       VLDR.F32         S1,=0.009768
  110 00000084 EEB2 1A04       VLDR.F32         S2,=10
  111 00000088         
  112 00000088 6008    loop3   STR              R0,[R1]     ; N is volatile
  113 0000008A EE00 0A10       VMOV.F32         S0,R0
  114 0000008E EEB8 0A40       VCVT.F32.U32     S0,S0       ; S0 has N



ARM Macro Assembler    Page 4 


  115 00000092 EE20 0A20       VMUL.F32         S0,S0,S1    ;N*0.09768
  116 00000096 EE30 0A01       VADD.F32         S0,S0,S2    ;10+N*0.0968
  117 0000009A ED82 0A00       VSTR.F32         S0,[R2]     ;T=10+N*0.0968
  118 0000009E F100 0001       ADD              R0,R0,#1
  119 000000A2 F5B0 5F80       CMP              R0,#4096
  120 000000A6 D1EF            BNE              loop3
  121 000000A8 4770            BX               LR
  122 000000AA         
  123 000000AA         Test4
  124 000000AA F04F 0000       MOV              R0,#0
  125 000000AE 493A            LDR              R1,=N
  126 000000B0 4A3A            LDR              R2,=T
  127 000000B2 F04F 037D       MOV              R3,#125
  128 000000B6 F04F 0440       MOV              R4,#64
  129 000000BA F44F 757A       MOV              R5,#1000
  130 000000BE         
  131 000000BE 6008    loop4   STR              R0,[R1]     ; N is volatile
  132 000000C0 FB00 F603       MUL              R6,R0,R3    ; N*125
  133 000000C4 4426            ADD              R6,R6,R4    ; N*125+64
  134 000000C6 EA4F 16D6       LSR              R6,R6,#7    ; (N*125+64)/128
  135 000000CA 442E            ADD              R6,R6,R5    ; 1000+(N*125+64)/1
                                                            28
  136 000000CC 6016            STR              R6,[R2]     ; T = 1000+(N*125+6
                                                            4)/128
  137 000000CE F100 0001       ADD              R0,R0,#1
  138 000000D2 F5B0 5F80       CMP              R0,#4096
  139 000000D6 D1F2            BNE              loop4
  140 000000D8 4770            BX               LR
  141 000000DA         
  142 000000DA         ; Input: S0 is new input
  143 000000DA         ; Output: S0 is filter output
  144 000000DA         Notch60Hz
  145 000000DA 4832            LDR              R0,=x
  146 000000DC EDD0 0A01       VLDR.F32         S1,[R0,#4]  ;read previous x1
  147 000000E0 EDC0 0A02       VSTR.F32         S1,[R0,#8]  ;S1 is x2
  148 000000E4 ED90 1A00       VLDR.F32         S2,[R0,#0]  ;read previous x
  149 000000E8 ED80 1A01       VSTR.F32         S2,[R0,#4]  ;S2 is x1
  150 000000EC ED80 0A00       VSTR.F32         S0,[R0,#0]  ;S0 is x = in
  151 000000F0 492D            LDR              R1,=y
  152 000000F2 EDD1 1A01       VLDR.F32         S3,[R1,#4]  ;read previous y1
  153 000000F6 EDC1 1A02       VSTR.F32         S3,[R1,#8]  ;S3 is y2
  154 000000FA ED91 2A00       VLDR.F32         S4,[R1,#0]  ;read previous y
  155 000000FE ED81 2A01       VSTR.F32         S4,[R1,#4]  ;S4 is y1 
  156 00000102 EDDF 2A2A       VLDR.F32         S5,=-1.8595529717765
  157 00000106 EE21 1A22       VMUL.F32         S2,S2,S5
  158 0000010A EE30 0A01       VADD.F32         S0,S0,S2    ;-1.8595529717765*x
                                                            1 
  159 0000010E EE30 0A20       VADD.F32         S0,S0,S1    ;+x2 
  160 00000112 EDDF 2A27       VLDR.F32         S5,=1.84095744205874
  161 00000116 EE22 2A22       VMUL.F32         S4,S4,S5
  162 0000011A EE30 0A02       VADD.F32         S0,S0,S4    ;+1.84095744205874*
                                                            y1 
  163 0000011E EDDF 2A25       VLDR.F32         S5,=-0.9801
  164 00000122 EE61 1AA2       VMUL.F32         S3,S3,S5
  165 00000126 EE30 0A21       VADD.F32         S0,S0,S3    ; -0.9801*y2 
  166 0000012A ED81 0A00       VSTR.F32         S0,[R1,#0]  ;set y 
  167 0000012E 4770            BX               LR
  168 00000130         
  169 00000130         Test5



ARM Macro Assembler    Page 5 


  170 00000130 4A1D            LDR              R2,=y
  171 00000132 ED9F 3A12       VLDR.F32         S6,=0.0
  172 00000136 ED82 3A00       VSTR.F32         S6,[R2]
  173 0000013A ED82 3A01       VSTR.F32         S6,[R2,#4]
  174 0000013E ED82 3A02       VSTR.F32         S6,[R2,#8]
  175 00000142 ED82 3A03       VSTR.F32         S6,[R2,#12]
  176 00000146 ED82 3A04       VSTR.F32         S6,[R2,#16]
  177 0000014A ED82 3A05       VSTR.F32         S6,[R2,#20]
  178 0000014E         
  179 0000014E ED9F 3A1A       VLDR.F32         S6,=100.0
  180 00000152 ED82 3A00       VSTR.F32         S6,[R2]
  181 00000156         
  182 00000156 4A10            LDR              R2,=N
  183 00000158 ED9F 3A17       VLDR.F32         S6,=100.0
  184 0000015C ED82 3A00       VSTR.F32         S6,[R2]
  185 00000160         
  186 00000160 4A0D    loop5   LDR              R2,=N
  187 00000162 ED92 0A00       VLDR.F32         S0,[R2]     ;input
  188 00000166 F7FF FFB8       BL               Notch60Hz
  189 0000016A E7F9            B                loop5
  190 0000016C 4770            BX               LR
  191 0000016E 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  192 00000170                 END                          ; end of file
              00000000 
              3DCCCCCD 
              00000000 
              00000000 
              00000000 
              3F490FD8 
              00000000 
              00000000 
              40490FDB 
              E000ED88 
              00000000 
              00000000 
              3C2009F6 
              00000000 
              00000000 
              BFEE05D5 
              3FEBA47E 
              BF7AE7D5 
              42C80000 
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\mai
n.d -o.\main.o -IE:\Keil\ARM\RV31\INC -IE:\Keil\ARM\CMSIS\Include -IE:\Keil\ARM
\Inc\Luminary --predefine="__EVAL SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

A 0000000C

Symbol: A
   Definitions
      At line 26 in file main.s
   Uses
      At line 83 in file main.s
Comment: A used once
Buffer 00000030

Symbol: Buffer
   Definitions
      At line 37 in file main.s
   Uses
      At line 40 in file main.s
      At line 67 in file main.s

DATA 00000000

Symbol: DATA
   Definitions
      At line 22 in file main.s
   Uses
      None
Comment: DATA unused
In 00000008

Symbol: In
   Definitions
      At line 25 in file main.s
   Uses
      At line 62 in file main.s
      At line 80 in file main.s

N 00000014

Symbol: N
   Definitions
      At line 28 in file main.s
   Uses
      At line 107 in file main.s
      At line 125 in file main.s
      At line 182 in file main.s
      At line 186 in file main.s

T 00000010

Symbol: T
   Definitions
      At line 27 in file main.s
   Uses
      At line 108 in file main.s
      At line 126 in file main.s

ten 00000000

Symbol: ten
   Definitions
      At line 23 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 38 in file main.s
      At line 51 in file main.s

tenth 00000004

Symbol: tenth
   Definitions
      At line 24 in file main.s
   Uses
      At line 39 in file main.s
      At line 55 in file main.s

x 00000024

Symbol: x
   Definitions
      At line 32 in file main.s
   Uses
      At line 145 in file main.s
Comment: x used once
x1 00000028

Symbol: x1
   Definitions
      At line 33 in file main.s
   Uses
      None
Comment: x1 unused
x2 0000002C

Symbol: x2
   Definitions
      At line 34 in file main.s
   Uses
      None
Comment: x2 unused
y 00000018

Symbol: y
   Definitions
      At line 29 in file main.s
   Uses
      At line 151 in file main.s
      At line 170 in file main.s

y1 0000001C

Symbol: y1
   Definitions
      At line 30 in file main.s
   Uses
      None
Comment: y1 unused
y2 00000020

Symbol: y2
   Definitions
      At line 31 in file main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      None
Comment: y2 unused
14 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 42 in file main.s
   Uses
      None
Comment: .text unused
CircleArea 0000005E

Symbol: CircleArea
   Definitions
      At line 90 in file main.s
   Uses
      At line 72 in file main.s
      At line 82 in file main.s

EnableFPU 0000006C

Symbol: EnableFPU
   Definitions
      At line 97 in file main.s
   Uses
      None
Comment: EnableFPU unused
Notch60Hz 000000DA

Symbol: Notch60Hz
   Definitions
      At line 144 in file main.s
   Uses
      At line 188 in file main.s
Comment: Notch60Hz used once
Start 00000000

Symbol: Start
   Definitions
      At line 46 in file main.s
   Uses
      At line 44 in file main.s
Comment: Start used once
Test 0000004A

Symbol: Test
   Definitions
      At line 79 in file main.s
   Uses
      At line 64 in file main.s
Comment: Test used once
Test0 00000000

Symbol: Test0
   Definitions
      At line 48 in file main.s
   Uses
      None
Comment: Test0 unused
Test3 00000078




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: Test3
   Definitions
      At line 105 in file main.s
   Uses
      None
Comment: Test3 unused
Test4 000000AA

Symbol: Test4
   Definitions
      At line 123 in file main.s
   Uses
      At line 49 in file main.s
Comment: Test4 used once
Test5 00000130

Symbol: Test5
   Definitions
      At line 169 in file main.s
   Uses
      None
Comment: Test5 unused
done 00000048

Symbol: done
   Definitions
      At line 77 in file main.s
   Uses
      At line 77 in file main.s
Comment: done used once
loop 00000034

Symbol: loop
   Definitions
      At line 70 in file main.s
   Uses
      At line 76 in file main.s
Comment: loop used once
loop3 00000088

Symbol: loop3
   Definitions
      At line 112 in file main.s
   Uses
      At line 120 in file main.s
Comment: loop3 used once
loop4 000000BE

Symbol: loop4
   Definitions
      At line 131 in file main.s
   Uses
      At line 139 in file main.s
Comment: loop4 used once
loop5 00000160

Symbol: loop5
   Definitions
      At line 186 in file main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 189 in file main.s
Comment: loop5 used once
15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_CPAC_R E000ED88

Symbol: NVIC_CPAC_R
   Definitions
      At line 96 in file main.s
   Uses
      At line 98 in file main.s
Comment: NVIC_CPAC_R used once
1 symbol
364 symbols in table
